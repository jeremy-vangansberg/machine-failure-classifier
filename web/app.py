import streamlit as st
import pandas as pd
import datetime
import time
from myfunctions import get_prediction, to_excel
from io import BytesIO
import xlsxwriter


st.set_page_config(
    page_title="Outil de pr√©diction des cat√©gories",
    page_icon="üßä",
    layout="wide"
    )





#st.title("Outil de pr√©diction des cat√©gories")
st.markdown("<h1 style='text-align: center'>Outil de pr√©diction des cat√©gories</h1>", unsafe_allow_html=True)
st.markdown("<h5 style='text-align: center'>L'objectif principal de cette application est d'automatiser la pr√©diction des cat√©gories pour des descriptions pr√©sentes dans un fichier Excel.</h5>", unsafe_allow_html=True)
st.markdown("<h5 style='text-align: center'>Application d√©velopp√©e par : J√©r√©my VANGANSBERG, Steven DELVAL, Emad DARWICH</h5>", unsafe_allow_html=True)

with st.sidebar:
    st.markdown("""
    
    ## Introduction

L'application "Outil de pr√©diction des cat√©gories" a √©t√© d√©velopp√©e en utilisant Streamlit. L'objectif principal de cette application est d'automatiser la pr√©diction des cat√©gories pour des descriptions pr√©sentes dans un fichier Excel.

## Utilisation

1. **Chargement du Fichier Excel**
   - L'utilisateur peut charger un fichier Excel en utilisant le bouton de t√©l√©chargement d√©di√©.
   - Le fichier doit contenir au moins deux colonnes : 'Description' et 'sous ensemble '.

2. **Analyse des Donn√©es**
   - Une fois le fichier charg√©, l'application analyse le nombre de lignes o√π la valeur dans la colonne 'sous ensemble ' est '#non cat√©goris√©'.
   - Cette information est affich√©e √† l'utilisateur pour une meilleure compr√©hension du jeu de donn√©es.

3. **Pr√©diction des Cat√©gories**
   - L'utilisateur peut d√©clencher le processus de pr√©diction en cliquant sur le bouton "Effectuer une pr√©diction".
   - Les pr√©dictions sont obtenues en utilisant la fonction `get_prediction` sur les descriptions du fichier Excel.
   - Les r√©sultats, y compris la cat√©gorie estim√©e et la probabilit√©, sont ajout√©s au DataFrame d'origine.

4. **Affichage des R√©sultats**
   - Les r√©sultats de la pr√©diction, y compris la nouvelle colonne 'sous ensemble estim√©', sont affich√©s dans un tableau.
   - Le temps n√©cessaire pour effectuer les pr√©dictions est √©galement affich√© pour donner √† l'utilisateur une id√©e du traitement.

5. **Exportation vers Excel**
   - L'utilisateur a la possibilit√© de t√©l√©charger les r√©sultats sous forme d'un fichier Excel.
   - Le fichier export√© comprend une nouvelle colonne 'sous ensemble estim√©' pour faciliter la r√©f√©rence ult√©rieure.

    """)

# Chargez le fichier Excel
uploaded_file = st.file_uploader("Choisissez un fichier Excel", type=['xlsx'])

if uploaded_file is not None:
    # Lecture du fichier Excel
    df = pd.read_excel(uploaded_file)

    try:
        # S√©lectionnez uniquement les colonnes 'Description', 'sous ensemble'
        selected_columns = ['Description', 'sous ensemble ']
        df = df[selected_columns]


        # S√©lectionnez uniquement les lignes o√π 'sous ensemble ' est "#non cat√©goris√©"
        # df_filtered = df[df['sous ensemble '] == "#non cat√©goris√©"]

        # Affichez le nombre de lignes
        st.write("Nombre de lignes √† pr√©dire :", len(df))

        text_list = df['Description'].values.tolist()

        columns = st.columns((2, 1, 2))
        button = columns[1].button('Effectuer une pr√©diction')


        col1, col2 = st.columns(2)
        

        
        with col1:

                if button :

                    # Code de l'application Streamlit
                    st.markdown(""" #### API Prediction App""")

                    with st.spinner("Appel API ..."):
                        # Enregistrez le temps de d√©but
                        start_time = time.time()
                        result = get_prediction(text_list)
                        df = pd.concat([df, result], axis=1)

                        # Remplacez les valeurs de 'category' par '√† cat√©goriser par un humain' lorsque la 'probability' est inf√©rieure √† 0.6
                        df.loc[df['probability'] < 0.6, 'category'] = 'inf√©rieur au seuil (0.6)'
                        df_pred = df.rename(columns={'category': 'sous ensemble estim√©'})

                        # Enregistrez le temps de fin
                        end_time = time.time()
                

                        
                        



                        if df_pred  is not None:
                            st.dataframe(df_pred)
                            with col2:          
                                    st.write("")
                                    st.write("")
                                    st.write("")
                                    st.write("")
                                    st.write("")
                                    st.write("")
                                    # Calculate the percentage
                                    percentage = (len(df_pred[df_pred['sous ensemble estim√©'] == '√† cat√©goriser par un humain']) / len(df_pred)) * 100
                                    percentage_less_than_6 = (len(df_pred[df_pred['sous ensemble estim√©'] == 'inf√©rieur au seuil (0.6)']) / len(df_pred)) * 100
                                    st.write(f"Temps de calcul : {round(end_time - start_time, 2)} secondes")
                                    st.write(f"le pourcentage de lignes pr√©dit comme '√† cat√©goriser par un humain' : {round(percentage,2)}%")
                                    st.write(f"le pourcentage de lignes pr√©dit comme 'inf√©rieur au seuil (0.6)' : {round(percentage_less_than_6,2)}%")
                                    
                                    
                                    df_xlsx = to_excel(df_pred)   
                                    st.download_button(label='üì• T√©l√©charger les r√©sultats au format Excel',
                                                                    data=df_xlsx ,
                                                                    file_name= 'df_test.xlsx')

    except:
        st.warning("V√©rifiez si votre fichier Excel contient les deux colonnes : 'Description' et 'sous ensemble'.", icon="‚ö†Ô∏è")
        
    



    
                    

                
